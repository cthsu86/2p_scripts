% function	getPixelDat_multiVid_continuousFrames_withLaserTimes.m()
% •	Create a raw mean pixel vector for the BEHAVIOR video.
% Assumes that writeFrames2BehaviorVid.m was run before it.
%
% 01/01/2021 - Modified from getPixelDat_multiVid_continuousFrames.m() to
% also reqd in a stackTimesFromXML file (generated by readTimeFromXML or
% readTimeFromXML_extractRegions_compatible).
%
% 10/8/2020 - Unlike previous versions of getPixelDat_multiVid, this script was written
% on October 8, 2020,and does not require an external Excel spreadsheet
% with annotations of laser onset and laser offset. This was developed to
% be compatible with our new format of continuous recordings, where the
% laser light is on continuously and frames are also recorded continuously.
% To facilitate file management however, the frames are converted to a
% series of *.avis after the recording period using the script
% writeFrames2BehaviorVid.m. getPixelDat_multiVid_continuousFrames assumes
% that writeFrames2BehaviorVid.m was run before it.

function getPixelDat_multiVid_continuousFrames_withLaserTimes()
beh_rootdir = 'C:\Users\Windows 10\Dropbox\Sehgal Lab\In Vivo Imaging\Data Analyzed In vivo\23E10\201119';
% beh_rootdir = 'C:\Users\Windows 10\Dropbox\Sehgal Lab\In Vivo Imaging\Data Analyzed In vivo\23E10\201116';

%Assuming that the *.avis in the file follow the same naming format as in
%writeFrames2BehaviorVid.m
recordedFPS = 30;
framesPerVid = 5*60*recordedFPS;
lastFrameNum = 162147; %164703; %Easiest if we just manually put this in after looking at what was the last frame (last video) in the folder.

aviRoot = 'fc2_save_2020-11-19-154903-_2Xspeed_frame';
% aviRoot = 'fc2_save_2020-11-16-154724-_2Xspeed_frame'; %63000to71999
% aviRoot = 'fc2_save_2020-09-14-170551-_3Xspeed_frame'; 
%Stop before frame numbers (up to and including the word 'frame')
stackTimesFileName = 'TSeries-11192020-1542-552_stackTimesFromXML.mat';

numZeroPad = 4;
currentUpperBound = 10^(numZeroPad+1);
frameStart = 1; %9000; %Usually equal to 1. Matches the first frame of the first video.

cd(beh_rootdir);

A = load(stackTimesFileName);
stackTimes = A.stackTimes;
stackStart_dateNum = A.startTime_dateNum;

%Need to figure out when the first frame is relative to the video time.
% stackTimes = stackTimes+stackStart_dateNum;
%Can not simply add the stackStart to the stackTimes - they are in
%different units!
%dateNum is in units of days - to get the number of seconds, need to
%multiply by 24 and 3600\, or divide stackTimes accordingly.
% stackStart_dateVec = datevec(stackStart_dateNum);

stackTimes = stackTimes/24/3600+stackStart_dateNum; %stackTimes are now in units of days.
vidStartDateString = [aviRoot(10:19) ' ' aviRoot(21:22) ':' aviRoot(23:24) ':' aviRoot(25:26)];
vidStart_dateNum = datenum(vidStartDateString);

secondsOffset = stackTimes(1,1)-vidStart_dateNum;
if(secondsOffset<0), %The stacks started collecting before the start of the video.
    %Thus, need to find the stack # that most closely matches the start of
    %the video:
    vidStart_stackIndex = find(min(abs(stackTimes(1)-vidStart_dateNum)));
%     tChunkVals = tChunkVals(vidStart_stackIndex:end);
    stackTimes = stackTimes(vidStart_stackIndex:end,:)-stackTimes(vidStart_stackIndex,1);
    stackTimes_frameUnits = round(stackTimes*recordedFPS);
%     if(thisChunkIndicesToFrames(1)==0),
%         thisChunkIndicesToFrames = thisChunkIndicesToFrames+1;
%     end;
else,
%     stackStart_vidInex = find(min(abs(stackMidtimes(1)-
    thisChunkIndicesToFrames = round((stackMidTimes-stackMidTimes(1,1)+secondsOffset)*recordedFPS*24*3600); %+stackStart_vidIndex-1; %No need to add 1 if the laserOnsetFrame was set with an additional 1 (for starting at index=1 instead of index=0).
end;

if(stackTimes_frameUnits(1)==0),
    stackTimes_frameUnits = stackTimes_frameUnits+1;
end;

for(segmentFrameStart = [frameStart:framesPerVid:lastFrameNum]),
    frameEnd = segmentFrameStart+framesPerVid-1;
    if(frameEnd>=lastFrameNum),
        frameEnd = lastFrameNum; %-1 since it starts at zero.
    end;
    vidname = [aviRoot num2str(segmentFrameStart) 'to' num2str(frameEnd) '.avi'];
    
    numFramesInVidSegment = frameEnd-segmentFrameStart+1;
    bgImgName = computeBackgroundForFrameRange(vidname,1,numFramesInVidSegment);
    bgsubtractAndDiffForFrameRange(vidname,1,numFramesInVidSegment,bgImgName);
    %Movement while the laser is on.
    %     bgImgName = computeBackgroundForFrameRange(vidname,laserOnFrame,laserOffFrame);
    %     bgsubtractAndDiffForFrameRange(vidname,laserOnFrame,laserOffFrame,bgImgName)
    %     %
    %     if(lri==size(laserDat,1)),
    %         bgImgName = computeBackgroundForFrameRange(vidname,laserOffFrame,'end');
    %         bgsubtractAndDiffForFrameRange(vidname,laserOffFrame,'end',bgImgName);
    %     end;
    %     %
    %     prevVidName = vidname;
    %     prevOnset = laserOnFrame;
    %     prevOffset = laserOffFrame;
end;